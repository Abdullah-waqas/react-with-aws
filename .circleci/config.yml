# react-with-aws-ab-waqas-dev-app
version: 2.1

orbs:
  slack: circleci/slack@4.9.3

executors:
  app-executor:
    docker:
      - image: cimg/node:16.17.0
      # - image: circleci/node:13.3.0
    working_directory: ~/repo
  slack-executor:
    docker:
      - image: cibuilds/base:latest
    resource_class: small
  terraform-executor:
    docker:
      - image: hashicorp/terraform:1.3.8

aliases:
  - &show-current-branch-name
    run:
      name: Show Current Branch
      command: echo ${CIRCLE_BRANCH}

  - &restore-cache
    restore_cache:
      keys:
        - app-{{ .Environment.CACHE_VERSION }}-{{ checksum "package.json" }}
        # fallback to using the latest cache if no exact match is found
        - app-
  - &install-dependencies
    run:
      name: Install Dependencies
      command: npm install

  - &save-cache
    save_cache:
      paths:
        - node_modules
      key: app-{{ .Environment.CACHE_VERSION }}-{{ checksum "package.json" }}

  - &install-aws-cli
    run:
      name: Installing AWS CLI
      working_directory: /
      command: |
        sudo apt-get -y -qq update
        sudo apt-get install -y awscli
        sudo apt-get install -y python python3-pip build-essential
      # sudo apt-get install -y python-pip python-dev build-essential

  - &build-project
    run:
      name: Build Project
      command: |
        npm install
        npm run build
        cd build
        zip ../build.zip -r * .[^.]*
        echo "Build Successful"

jobs:
  build:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - *install-dependencies
      - *save-cache
      - run:
          name: Copy Infrastructure Folder
          command: cp -r infrastructure artifacts/infrastructure
      - persist_to_workspace:
          root: ./
          paths:
            - artifacts

  linting:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - run:
          name: "Run Linting"
          command: npm run lint

  prettier:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - run:
          name: "Run Prettier"
          command: npm run prettier:check

  terraform-validate:
    executor: terraform-executor
    steps:
      - checkout
      - *show-current-branch-name
      - run:
          name: "Terraform validate and Format"
          command: |
            cd infrastructure
            terraform init -backend=false
            terraform validate
            terraform fmt -check

  terraform-plan-and-apply:
    executor: terraform-executor
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - *show-current-branch-name
      - run:
          name: "Terraform Plan"
          command: |
            cd artifacts/infrastructure/
            terraform init
            terraform workspace select ${CIRCLE_BRANCH} || terraform workspace new ${CIRCLE_BRANCH}
            terraform plan
      - run:
          name: "Terraform Apply"
          command: |
            cd artifacts/infrastructure/
            terraform workspace select ${CIRCLE_BRANCH}
            terraform apply --auto-approve
            terraform output react_with_aws_app_bucket_name > ../react_with_aws_bucket_name.txt
            terraform output cloudfront_distribution_id > ../cloudfront_distribution_id.txt
      - persist_to_workspace:
          root: ./
          paths:
            - "artifacts"

  deploy-to-aws-s3:
    executor: app-executor
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - *show-current-branch-name
      - *install-aws-cli
      - *build-project

      - run:
          name: Deploy to AWS S3
          command: |
            AWS_BUCKET_NAME=$(cat artifacts/react_with_aws_bucket_name.txt | sed 's/\"//g')
            echo AWS_BUCKET_NAME
            if [ "${CIRCLE_BRANCH}" == "master" ]
              then
                echo "Master S3"
                aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_BUCKET_NAME} --delete
            elif [ "${CIRCLE_BRANCH}" == "staging" ]
              then
                echo "Staging S3"
                aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_BUCKET_NAME} --delete
            else
              echo "Dev S3"
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_BUCKET_NAME} --delete
            fi

  deploy-to-aws-cloudfront:
    executor: app-executor
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - *show-current-branch-name
      - *install-aws-cli
      - *build-project

      - run:
          name: Deploy to AWS Cloudfront
          command: |
            CLOUDFRONT_DISTRIBUTION_ID=$(cat artifacts/cloudfront_distribution_id.txt | sed 's/\"//g')
            echo CLOUDFRONT_DISTRIBUTION_ID
            aws configure set preview.cloudfront true
            if [ "${CIRCLE_BRANCH}" == "master" ]
            then
              echo "Master cloudfront"
              aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_DISTRIBUTION_ID} --path /\*
            elif [ "${CIRCLE_BRANCH}" == "staging" ]
            then
              echo "Staging cloudfront"
              aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_DISTRIBUTION_ID} --path /\*
            else
              echo "dev cloudfront"
              aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_DISTRIBUTION_ID} --path /\*
            fi

  notify-via-slack:
    # executor: app-executor
    executor: slack-executor
    steps:
      # - checkout
      # - *show-current-branch-name
      # - *restore-cache
      - slack/notify:
          channel: "reactwithaws-circleci"
          event: pass
          mentions: "@here"
          template: basic_success_1

      - slack/notify:
          channel: "reactwithaws-circleci"
          event: fail
          mentions: "@here"
          template: basic_fail_1

  terraform-destroy:
    executor: terraform-executor
    steps:
      - checkout
      - *show-current-branch-name
      - run:
          name: Terraform Destroy
          command: |
            cd infrastructure/
            terraform init
            terraform workspace select ${CIRCLE_BRANCH} || terraform workspace new ${CIRCLE_BRANCH}
            terraform destroy --auto-approve

workflows:
  build-and-deploy:
    jobs:
      - build
      - linting:
          requires:
            - build
          filters:
            branches:
              only:
                - develop
                - staging
                - master

      - prettier:
          requires:
            - build
          filters:
            branches:
              only:
                - develop
                - staging
                - master

      - terraform-validate:
          requires:
            - linting
            - prettier
          filters:
            branches:
              only:
                - develop
                - staging
                - master

      - terraform-plan-and-apply:
          requires:
            - terraform-validate
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - deploy-to-aws-s3:
          requires:
            - terraform-plan-and-apply
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - deploy-to-aws-cloudfront:
          requires:
            - deploy-to-aws-s3
          filters:
            branches:
              only:
                - develop
                - staging
                - master

      - notify-via-slack:
          # context: slack-secrets-react-with-aws
          context: slack-secrets
          requires:
            - deploy-to-aws-cloudfront
          filters:
            branches:
              only:
                - develop
                - staging
                - master

      - hold:
          type: approval
          requires:
            - deploy-to-aws-cloudfront

      - terraform-destroy:
          requires:
            - hold
          filters:
            branches:
              only:
                - develop
                - staging
                - master
